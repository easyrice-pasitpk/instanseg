bioimageio_utils.py (2): pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
Saving results to /project/lt200377-mpind/segment/models/instanseg/ez20251002_instseg
Setting RNG seed to 5555
Generating InstanSeg_UNet
Loading dataset from  /project/lt200377-mpind/segment/ez20251002_dataset.pth
Datasets available in  Train
{('EZ-20251002', 103)}
After filtering using:
{('EZ-20251002', 103)}
Datasets available in  Validation
{('EZ-20251002', 5)}
After filtering using:
{('EZ-20251002', 5)}
Hotstart for 10 epochs with binary_xloss and dice_loss
Epoch: 0
  0%|          | 0/63 [00:00<?, ?it/s]augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
  2%|▏         | 1/63 [00:28<28:58, 28.04s/it]  3%|▎         | 2/63 [00:28<12:10, 11.98s/it]  5%|▍         | 3/63 [00:29<06:50,  6.84s/it]  6%|▋         | 4/63 [00:30<04:20,  4.41s/it]  8%|▊         | 5/63 [00:30<02:57,  3.07s/it] 10%|▉         | 6/63 [00:31<02:08,  2.26s/it] 11%|█         | 7/63 [00:32<01:38,  1.77s/it] 13%|█▎        | 8/63 [00:33<01:18,  1.43s/it] 14%|█▍        | 9/63 [00:35<01:33,  1.74s/it] 16%|█▌        | 10/63 [00:36<01:20,  1.52s/it] 17%|█▋        | 11/63 [00:37<01:06,  1.28s/it] 19%|█▉        | 12/63 [00:37<00:56,  1.11s/it] 21%|██        | 13/63 [00:38<00:49,  1.02it/s] 22%|██▏       | 14/63 [00:39<00:44,  1.10it/s] 24%|██▍       | 15/63 [00:40<00:41,  1.16it/s] 25%|██▌       | 16/63 [00:40<00:38,  1.23it/s] 27%|██▋       | 17/63 [00:43<01:09,  1.50s/it] 29%|██▊       | 18/63 [00:45<01:05,  1.46s/it] 30%|███       | 19/63 [00:46<00:54,  1.24s/it] 32%|███▏      | 20/63 [00:46<00:46,  1.08s/it] 33%|███▎      | 21/63 [00:47<00:40,  1.03it/s] 35%|███▍      | 22/63 [00:48<00:36,  1.14it/s] 37%|███▋      | 23/63 [00:48<00:33,  1.18it/s] 38%|███▊      | 24/63 [00:49<00:30,  1.27it/s] 40%|███▉      | 25/63 [00:52<00:49,  1.31s/it] 41%|████▏     | 26/63 [00:54<00:57,  1.56s/it] 43%|████▎     | 27/63 [00:54<00:47,  1.31s/it] 44%|████▍     | 28/63 [00:55<00:39,  1.13s/it] 46%|████▌     | 29/63 [00:56<00:34,  1.02s/it] 48%|████▊     | 30/63 [00:57<00:30,  1.07it/s] 49%|████▉     | 31/63 [00:57<00:27,  1.15it/s] 51%|█████     | 32/63 [00:58<00:25,  1.21it/s] 52%|█████▏    | 33/63 [01:00<00:33,  1.11s/it] 54%|█████▍    | 34/63 [01:03<00:48,  1.66s/it] 56%|█████▌    | 35/63 [01:03<00:38,  1.37s/it] 57%|█████▋    | 36/63 [01:04<00:31,  1.18s/it] 59%|█████▊    | 37/63 [01:05<00:27,  1.05s/it] 60%|██████    | 38/63 [01:06<00:23,  1.06it/s] 62%|██████▏   | 39/63 [01:06<00:21,  1.13it/s] 63%|██████▎   | 40/63 [01:07<00:19,  1.19it/s] 65%|██████▌   | 41/63 [01:08<00:19,  1.12it/s] 67%|██████▋   | 42/63 [01:11<00:34,  1.62s/it] 68%|██████▊   | 43/63 [01:12<00:26,  1.35s/it] 70%|██████▉   | 44/63 [01:13<00:22,  1.16s/it] 71%|███████▏  | 45/63 [01:14<00:18,  1.04s/it] 73%|███████▎  | 46/63 [01:14<00:16,  1.05it/s] 75%|███████▍  | 47/63 [01:15<00:14,  1.14it/s] 76%|███████▌  | 48/63 [01:16<00:12,  1.20it/s] 78%|███████▊  | 49/63 [01:17<00:11,  1.24it/s] 79%|███████▉  | 50/63 [01:20<00:20,  1.58s/it] 81%|████████  | 51/63 [01:21<00:16,  1.33s/it] 83%|████████▎ | 52/63 [01:21<00:12,  1.15s/it] 84%|████████▍ | 53/63 [01:22<00:09,  1.00it/s] 86%|████████▌ | 54/63 [01:23<00:08,  1.09it/s] 87%|████████▋ | 55/63 [01:23<00:06,  1.19it/s] 89%|████████▉ | 56/63 [01:24<00:05,  1.24it/s] 90%|█████████ | 57/63 [01:25<00:04,  1.27it/s] 92%|█████████▏| 58/63 [01:27<00:06,  1.23s/it] 94%|█████████▎| 59/63 [01:28<00:04,  1.06s/it] 95%|█████████▌| 60/63 [01:29<00:02,  1.05it/s] 97%|█████████▋| 61/63 [01:29<00:01,  1.14it/s] 98%|█████████▊| 62/63 [01:30<00:00,  1.21it/s]100%|██████████| 63/63 [01:30<00:00,  1.49it/s]100%|██████████| 63/63 [01:30<00:00,  1.44s/it]
  0%|          | 0/13 [00:00<?, ?it/s]augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
augmentations.py (839): Pixel size None is not a float <class 'NoneType'>, check metadata
  8%|▊         | 1/13 [00:23<04:36, 23.04s/it] 15%|█▌        | 2/13 [00:23<01:46,  9.72s/it] 23%|██▎       | 3/13 [00:23<00:54,  5.46s/it] 31%|███       | 4/13 [00:24<00:31,  3.47s/it] 38%|███▊      | 5/13 [00:24<00:18,  2.37s/it] 46%|████▌     | 6/13 [00:25<00:11,  1.70s/it] 54%|█████▍    | 7/13 [00:25<00:07,  1.28s/it] 62%|██████▏   | 8/13 [00:25<00:04,  1.00it/s] 69%|██████▉   | 9/13 [00:28<00:05,  1.44s/it] 77%|███████▋  | 10/13 [00:28<00:03,  1.11s/it] 85%|████████▍ | 11/13 [00:29<00:01,  1.04it/s] 92%|█████████▏| 12/13 [00:29<00:00,  1.27it/s]100%|██████████| 13/13 [00:29<00:00,  1.63it/s]100%|██████████| 13/13 [00:29<00:00,  2.30s/it]
Requesting default device: cuda
Optimizing hyperparameters
  0%|          | 0/50 [00:00<?, ?trial/s, best loss=?]  2%|▏         | 1/50 [00:02<02:13,  2.72s/trial, best loss: 1.0]  4%|▍         | 2/50 [00:04<01:39,  2.07s/trial, best loss: 1.0]  6%|▌         | 3/50 [00:05<01:27,  1.86s/trial, best loss: 1.0]  8%|▊         | 4/50 [00:07<01:23,  1.82s/trial, best loss: 1.0] 10%|█         | 5/50 [00:09<01:18,  1.74s/trial, best loss: 1.0] 12%|█▏        | 6/50 [00:10<01:14,  1.70s/trial, best loss: 1.0] 14%|█▍        | 7/50 [00:12<01:10,  1.65s/trial, best loss: 1.0] 16%|█▌        | 8/50 [00:14<01:07,  1.62s/trial, best loss: 1.0] 18%|█▊        | 9/50 [00:15<01:06,  1.62s/trial, best loss: 1.0] 20%|██        | 10/50 [00:17<01:03,  1.59s/trial, best loss: 1.0] 22%|██▏       | 11/50 [00:18<01:01,  1.58s/trial, best loss: 1.0] 24%|██▍       | 12/50 [00:20<01:03,  1.68s/trial, best loss: 1.0] 26%|██▌       | 13/50 [00:22<01:00,  1.64s/trial, best loss: 1.0] 28%|██▊       | 14/50 [00:23<00:58,  1.61s/trial, best loss: 1.0] 30%|███       | 15/50 [00:25<00:55,  1.59s/trial, best loss: 1.0] 32%|███▏      | 16/50 [00:26<00:53,  1.58s/trial, best loss: 1.0] 34%|███▍      | 17/50 [00:28<00:51,  1.57s/trial, best loss: 1.0] 36%|███▌      | 18/50 [00:30<00:51,  1.60s/trial, best loss: 1.0] 38%|███▊      | 19/50 [00:31<00:49,  1.59s/trial, best loss: 1.0] 40%|████      | 20/50 [00:33<00:47,  1.57s/trial, best loss: 1.0] 42%|████▏     | 21/50 [00:35<00:49,  1.69s/trial, best loss: 1.0] 44%|████▍     | 22/50 [00:36<00:46,  1.66s/trial, best loss: 1.0] 46%|████▌     | 23/50 [00:38<00:43,  1.63s/trial, best loss: 1.0] 48%|████▊     | 24/50 [00:39<00:42,  1.63s/trial, best loss: 1.0] 50%|█████     | 25/50 [00:41<00:40,  1.61s/trial, best loss: 1.0] 52%|█████▏    | 26/50 [00:43<00:38,  1.60s/trial, best loss: 1.0] 54%|█████▍    | 27/50 [00:44<00:37,  1.61s/trial, best loss: 1.0] 56%|█████▌    | 28/50 [00:46<00:35,  1.60s/trial, best loss: 1.0] 58%|█████▊    | 29/50 [00:48<00:35,  1.67s/trial, best loss: 1.0] 60%|██████    | 30/50 [00:49<00:33,  1.66s/trial, best loss: 1.0] 62%|██████▏   | 31/50 [00:51<00:31,  1.64s/trial, best loss: 1.0] 64%|██████▍   | 32/50 [00:52<00:28,  1.61s/trial, best loss: 1.0] 66%|██████▌   | 33/50 [00:54<00:27,  1.59s/trial, best loss: 1.0] 68%|██████▊   | 34/50 [00:55<00:25,  1.58s/trial, best loss: 1.0] 70%|███████   | 35/50 [00:57<00:23,  1.57s/trial, best loss: 1.0] 72%|███████▏  | 36/50 [00:59<00:21,  1.57s/trial, best loss: 1.0] 74%|███████▍  | 37/50 [01:00<00:21,  1.67s/trial, best loss: 1.0] 76%|███████▌  | 38/50 [01:02<00:19,  1.64s/trial, best loss: 1.0] 78%|███████▊  | 39/50 [01:04<00:17,  1.63s/trial, best loss: 1.0] 80%|████████  | 40/50 [01:05<00:16,  1.63s/trial, best loss: 1.0] 82%|████████▏ | 41/50 [01:07<00:14,  1.61s/trial, best loss: 1.0] 84%|████████▍ | 42/50 [01:08<00:12,  1.59s/trial, best loss: 1.0] 86%|████████▌ | 43/50 [01:10<00:11,  1.61s/trial, best loss: 1.0] 88%|████████▊ | 44/50 [01:12<00:09,  1.59s/trial, best loss: 1.0] 90%|█████████ | 45/50 [01:13<00:08,  1.67s/trial, best loss: 1.0] 92%|█████████▏| 46/50 [01:15<00:06,  1.69s/trial, best loss: 1.0] 94%|█████████▍| 47/50 [01:17<00:04,  1.66s/trial, best loss: 1.0] 96%|█████████▌| 48/50 [01:18<00:03,  1.64s/trial, best loss: 1.0] 98%|█████████▊| 49/50 [01:20<00:01,  1.65s/trial, best loss: 1.0]100%|██████████| 50/50 [01:22<00:00,  1.62s/trial, best loss: 1.0]100%|██████████| 50/50 [01:22<00:00,  1.64s/trial, best loss: 1.0]
{'mask_threshold': 0.3761984780714156, 'mean_threshold': 0.09466671407746347, 'seed_threshold': 0.9046790862238674}
Saving model, best f1_score: 0.0
train_loss: 1.9145654, test_loss: 2.3307443, training_time: 90, testing_time: 30, f1_score: 0.0, lr:: 0.001
Epoch: 1
  0%|          | 0/63 [00:00<?, ?it/s]  2%|▏         | 1/63 [00:26<27:19, 26.44s/it]  3%|▎         | 2/63 [00:27<11:31, 11.33s/it]  5%|▍         | 3/63 [00:27<06:29,  6.48s/it]  6%|▋         | 4/63 [00:28<04:08,  4.21s/it]  8%|▊         | 5/63 [00:29<02:51,  2.96s/it] 10%|▉         | 6/63 [00:30<02:05,  2.20s/it] 11%|█         | 7/63 [00:30<01:36,  1.72s/it] 13%|█▎        | 8/63 [00:31<01:17,  1.40s/it] 14%|█▍        | 9/63 [00:34<01:46,  1.97s/it] 16%|█▌        | 10/63 [00:35<01:31,  1.73s/it] 17%|█▋        | 11/63 [00:36<01:14,  1.43s/it] 19%|█▉        | 12/63 [00:37<01:01,  1.21s/it] 21%|██        | 13/63 [00:38<00:53,  1.06s/it] 22%|██▏       | 14/63 [00:38<00:46,  1.05it/s] 24%|██▍       | 15/63 [00:39<00:42,  1.14it/s] 25%|██▌       | 16/63 [00:40<00:39,  1.18it/s] 27%|██▋       | 17/63 [00:42<01:04,  1.40s/it] 29%|██▊       | 18/63 [00:45<01:11,  1.59s/it] 30%|███       | 19/63 [00:45<00:58,  1.33s/it] 32%|███▏      | 20/63 [00:46<00:49,  1.15s/it] 33%|███▎      | 21/63 [00:47<00:42,  1.02s/it] 35%|███▍      | 22/63 [00:47<00:38,  1.06it/s] 37%|███▋      | 23/63 [00:48<00:34,  1.16it/s] 38%|███▊      | 24/63 [00:49<00:31,  1.23it/s] 40%|███▉      | 25/63 [00:51<00:47,  1.25s/it] 41%|████▏     | 26/63 [00:53<00:55,  1.50s/it] 43%|████▎     | 27/63 [00:54<00:44,  1.23s/it] 44%|████▍     | 28/63 [00:55<00:37,  1.07s/it] 46%|████▌     | 29/63 [00:55<00:33,  1.02it/s] 48%|████▊     | 30/63 [00:56<00:29,  1.10it/s] 49%|████▉     | 31/63 [00:57<00:27,  1.16it/s] 51%|█████     | 32/63 [00:57<00:25,  1.22it/s] 52%|█████▏    | 33/63 [01:00<00:36,  1.22s/it] 54%|█████▍    | 34/63 [01:02<00:42,  1.46s/it] 56%|█████▌    | 35/63 [01:02<00:34,  1.24s/it] 57%|█████▋    | 36/63 [01:03<00:29,  1.08s/it] 59%|█████▊    | 37/63 [01:04<00:25,  1.03it/s] 60%|██████    | 38/63 [01:05<00:22,  1.11it/s] 62%|██████▏   | 39/63 [01:05<00:20,  1.19it/s] 63%|██████▎   | 40/63 [01:06<00:18,  1.26it/s] 65%|██████▌   | 41/63 [01:09<00:29,  1.35s/it] 67%|██████▋   | 42/63 [01:10<00:28,  1.36s/it] 68%|██████▊   | 43/63 [01:11<00:23,  1.17s/it] 70%|██████▉   | 44/63 [01:11<00:19,  1.04s/it] 71%|███████▏  | 45/63 [01:12<00:16,  1.08it/s] 73%|███████▎  | 46/63 [01:13<00:14,  1.14it/s] 75%|███████▍  | 47/63 [01:14<00:13,  1.21it/s] 76%|███████▌  | 48/63 [01:14<00:11,  1.27it/s] 78%|███████▊  | 49/63 [01:17<00:19,  1.39s/it] 79%|███████▉  | 50/63 [01:19<00:19,  1.47s/it] 81%|████████  | 51/63 [01:19<00:14,  1.23s/it] 83%|████████▎ | 52/63 [01:20<00:11,  1.09s/it] 84%|████████▍ | 53/63 [01:21<00:09,  1.02it/s] 86%|████████▌ | 54/63 [01:22<00:08,  1.10it/s] 87%|████████▋ | 55/63 [01:22<00:06,  1.16it/s] 89%|████████▉ | 56/63 [01:23<00:05,  1.24it/s] 90%|█████████ | 57/63 [01:25<00:07,  1.23s/it] 92%|█████████▏| 58/63 [01:27<00:06,  1.37s/it] 94%|█████████▎| 59/63 [01:28<00:04,  1.17s/it] 95%|█████████▌| 60/63 [01:28<00:03,  1.04s/it] 97%|█████████▋| 61/63 [01:29<00:01,  1.06it/s] 98%|█████████▊| 62/63 [01:30<00:00,  1.14it/s]100%|██████████| 63/63 [01:30<00:00,  1.40it/s]100%|██████████| 63/63 [01:30<00:00,  1.44s/it]
  0%|          | 0/13 [00:00<?, ?it/s]  0%|          | 0/13 [00:22<?, ?it/s]
Traceback (most recent call last):
  File "/lustrefs/disk/home/pjakkraw/workspace/instanseg/instanseg/scripts/train.py", line 394, in <module>
    instanseg_training()
  File "/lustrefs/disk/home/pjakkraw/workspace/instanseg/instanseg/scripts/train.py", line 351, in instanseg_training
    model, train_losses, test_losses, f1_list, f1_list_cells = main(model, loss_fn, train_loader, test_loader, num_epochs=hot_epochs, epoch_name='hotstart_epoch')
                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustrefs/disk/home/pjakkraw/workspace/instanseg/instanseg/scripts/train.py", line 100, in main
    test_loss, f1_score, test_time = test_epoch(model, device, test_loader, loss_fn, debug=False,
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustrefs/disk/home/pjakkraw/workspace/instanseg/.venv/lib64/python3.11/site-packages/instanseg/utils/AI_utils.py", line 80, in test_epoch
    predicted_labels = torch.stack([postprocessing_fn(out) for out in output])
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lustrefs/disk/home/pjakkraw/workspace/instanseg/.venv/lib64/python3.11/site-packages/instanseg/utils/AI_utils.py", line 80, in <listcomp>
    predicted_labels = torch.stack([postprocessing_fn(out) for out in output])
                                    ^^^^^^^^^^^^^^^^^^^^^^
  File "/lustrefs/disk/home/pjakkraw/workspace/instanseg/.venv/lib64/python3.11/site-packages/instanseg/utils/loss/instanseg_loss.py", line 1030, in postprocessing
    peak_distance = self.params['peak_distance']
                    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^
KeyError: 'peak_distance'
